// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Message.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - V2PMessageRoot

@implementation V2PMessageRoot

@end

#pragma mark - V2PMessageRoot_FileDescriptor

static GPBFileDescriptor *V2PMessageRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - V2PPacket

@implementation V2PPacket

@dynamic hasPacketType, packetType;
@dynamic hasFrom, from;
@dynamic hasTo, to;
@dynamic hasId_p, id_p;
@dynamic hasMethod, method;
@dynamic hasOperateType, operateType;
@dynamic hasResult, result;
@dynamic hasData_p, data_p;
@dynamic hasVersion, version;

typedef struct V2PPacket__storage_ {
  uint32_t _has_storage_[1];
  V2PPacket_type packetType;
  NSString *from;
  NSString *to;
  NSString *id_p;
  NSString *method;
  NSString *operateType;
  V2PResult *result;
  V2PData *data_p;
  NSString *version;
} V2PPacket__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "packetType",
        .dataTypeSpecific.enumDescFunc = V2PPacket_type_EnumDescriptor,
        .number = V2PPacket_FieldNumber_PacketType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(V2PPacket__storage_, packetType),
        .flags = GPBFieldRequired | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = V2PPacket_FieldNumber_From,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(V2PPacket__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "to",
        .dataTypeSpecific.className = NULL,
        .number = V2PPacket_FieldNumber_To,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(V2PPacket__storage_, to),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = V2PPacket_FieldNumber_Id_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(V2PPacket__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "method",
        .dataTypeSpecific.className = NULL,
        .number = V2PPacket_FieldNumber_Method,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(V2PPacket__storage_, method),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "operateType",
        .dataTypeSpecific.className = NULL,
        .number = V2PPacket_FieldNumber_OperateType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(V2PPacket__storage_, operateType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "result",
        .dataTypeSpecific.className = GPBStringifySymbol(V2PResult),
        .number = V2PPacket_FieldNumber_Result,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(V2PPacket__storage_, result),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = GPBStringifySymbol(V2PData),
        .number = V2PPacket_FieldNumber_Data_p,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(V2PPacket__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = V2PPacket_FieldNumber_Version,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(V2PPacket__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[V2PPacket class]
                                     rootClass:[V2PMessageRoot class]
                                          file:V2PMessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(V2PPacket__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\n\000\006\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum V2PPacket_type

GPBEnumDescriptor *V2PPacket_type_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Iq\000Msg\000Buffer\000Beat\000";
    static const int32_t values[] = {
        V2PPacket_type_Iq,
        V2PPacket_type_Msg,
        V2PPacket_type_Buffer,
        V2PPacket_type_Beat,
    };
    static const char *extraTextFormatInfo = "\004\000\"\000\001#\000\002&\000\003$\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(V2PPacket_type)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:V2PPacket_type_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL V2PPacket_type_IsValidValue(int32_t value__) {
  switch (value__) {
    case V2PPacket_type_Iq:
    case V2PPacket_type_Msg:
    case V2PPacket_type_Buffer:
    case V2PPacket_type_Beat:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - V2PResult

@implementation V2PResult

@dynamic hasResult, result;
@dynamic hasError, error;

typedef struct V2PResult__storage_ {
  uint32_t _has_storage_[1];
  NSString *error;
} V2PResult__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.className = NULL,
        .number = V2PResult_FieldNumber_Result,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "error",
        .dataTypeSpecific.className = NULL,
        .number = V2PResult_FieldNumber_Error,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(V2PResult__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[V2PResult class]
                                     rootClass:[V2PMessageRoot class]
                                          file:V2PMessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(V2PResult__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - V2PData

@implementation V2PData

@dynamic hasNormal, normal;
@dynamic hasByteDate, byteDate;
@dynamic hasFromTime, fromTime;
@dynamic hasToTime, toTime;
@dynamic hasSum, sum;
@dynamic hasFrom, from;
@dynamic hasTo, to;
@dynamic positionArray, positionArray_Count;
@dynamic userArray, userArray_Count;
@dynamic videoArray, videoArray_Count;
@dynamic gratuityArray, gratuityArray_Count;
@dynamic rewardArray, rewardArray_Count;
@dynamic userStateArray, userStateArray_Count;
@dynamic assetLogArray, assetLogArray_Count;

typedef struct V2PData__storage_ {
  uint32_t _has_storage_[1];
  int32_t sum;
  int32_t from;
  int32_t to;
  NSString *normal;
  NSData *byteDate;
  NSMutableArray *positionArray;
  NSMutableArray *userArray;
  NSMutableArray *videoArray;
  NSMutableArray *gratuityArray;
  NSMutableArray *rewardArray;
  NSMutableArray *userStateArray;
  NSMutableArray *assetLogArray;
  int64_t fromTime;
  int64_t toTime;
} V2PData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "normal",
        .dataTypeSpecific.className = NULL,
        .number = V2PData_FieldNumber_Normal,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(V2PData__storage_, normal),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "byteDate",
        .dataTypeSpecific.className = NULL,
        .number = V2PData_FieldNumber_ByteDate,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(V2PData__storage_, byteDate),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "fromTime",
        .dataTypeSpecific.className = NULL,
        .number = V2PData_FieldNumber_FromTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(V2PData__storage_, fromTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "toTime",
        .dataTypeSpecific.className = NULL,
        .number = V2PData_FieldNumber_ToTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(V2PData__storage_, toTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sum",
        .dataTypeSpecific.className = NULL,
        .number = V2PData_FieldNumber_Sum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(V2PData__storage_, sum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = V2PData_FieldNumber_From,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(V2PData__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "to",
        .dataTypeSpecific.className = NULL,
        .number = V2PData_FieldNumber_To,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(V2PData__storage_, to),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "positionArray",
        .dataTypeSpecific.className = GPBStringifySymbol(V2PPosition),
        .number = V2PData_FieldNumber_PositionArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(V2PData__storage_, positionArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userArray",
        .dataTypeSpecific.className = GPBStringifySymbol(V2PUser),
        .number = V2PData_FieldNumber_UserArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(V2PData__storage_, userArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "videoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(V2PVideo),
        .number = V2PData_FieldNumber_VideoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(V2PData__storage_, videoArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "gratuityArray",
        .dataTypeSpecific.className = GPBStringifySymbol(V2PGratuity),
        .number = V2PData_FieldNumber_GratuityArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(V2PData__storage_, gratuityArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "rewardArray",
        .dataTypeSpecific.className = GPBStringifySymbol(V2PReward),
        .number = V2PData_FieldNumber_RewardArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(V2PData__storage_, rewardArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userStateArray",
        .dataTypeSpecific.className = GPBStringifySymbol(V2PUserState),
        .number = V2PData_FieldNumber_UserStateArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(V2PData__storage_, userStateArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "assetLogArray",
        .dataTypeSpecific.className = GPBStringifySymbol(V2PAssetLog),
        .number = V2PData_FieldNumber_AssetLogArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(V2PData__storage_, assetLogArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[V2PData class]
                                     rootClass:[V2PMessageRoot class]
                                          file:V2PMessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(V2PData__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\002\010\000\003\010\000\004\006\000\r\000userState\000\016\000assetLog\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - V2PUser

@implementation V2PUser

@dynamic hasId_p, id_p;
@dynamic hasPhone, phone;
@dynamic hasName, name;
@dynamic hasPwd, pwd;
@dynamic hasPwd2OrCode, pwd2OrCode;
@dynamic hasRealName, realName;
@dynamic hasHeadurl, headurl;
@dynamic hasSignText, signText;
@dynamic hasSex, sex;
@dynamic hasAddress, address;
@dynamic hasExperience, experience;
@dynamic hasFansCount, fansCount;
@dynamic hasFollowCount, followCount;
@dynamic hasPosition, position;
@dynamic hasDeviceId, deviceId;
@dynamic hasFollowType, followType;
@dynamic hasDescName, descName;
@dynamic hasV2Id, v2Id;
@dynamic hasV2UserName, v2UserName;
@dynamic hasV2Pwd, v2Pwd;
@dynamic hasVideoCount, videoCount;
@dynamic hasV2DeviceId1, v2DeviceId1;
@dynamic hasV2DeviceId2, v2DeviceId2;

typedef struct V2PUser__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t sex;
  int32_t experience;
  int32_t fansCount;
  int32_t followCount;
  int32_t followType;
  int32_t videoCount;
  NSString *phone;
  NSString *name;
  NSString *pwd;
  NSString *pwd2OrCode;
  NSString *realName;
  NSString *headurl;
  NSString *signText;
  NSString *address;
  V2PPosition *position;
  NSString *deviceId;
  NSString *descName;
  NSString *v2Id;
  NSString *v2UserName;
  NSString *v2Pwd;
  NSString *v2DeviceId1;
  NSString *v2DeviceId2;
} V2PUser__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = V2PUser_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(V2PUser__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "phone",
        .dataTypeSpecific.className = NULL,
        .number = V2PUser_FieldNumber_Phone,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(V2PUser__storage_, phone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = V2PUser_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(V2PUser__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pwd",
        .dataTypeSpecific.className = NULL,
        .number = V2PUser_FieldNumber_Pwd,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(V2PUser__storage_, pwd),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pwd2OrCode",
        .dataTypeSpecific.className = NULL,
        .number = V2PUser_FieldNumber_Pwd2OrCode,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(V2PUser__storage_, pwd2OrCode),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "realName",
        .dataTypeSpecific.className = NULL,
        .number = V2PUser_FieldNumber_RealName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(V2PUser__storage_, realName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "headurl",
        .dataTypeSpecific.className = NULL,
        .number = V2PUser_FieldNumber_Headurl,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(V2PUser__storage_, headurl),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signText",
        .dataTypeSpecific.className = NULL,
        .number = V2PUser_FieldNumber_SignText,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(V2PUser__storage_, signText),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.className = NULL,
        .number = V2PUser_FieldNumber_Sex,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(V2PUser__storage_, sex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "address",
        .dataTypeSpecific.className = NULL,
        .number = V2PUser_FieldNumber_Address,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(V2PUser__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "experience",
        .dataTypeSpecific.className = NULL,
        .number = V2PUser_FieldNumber_Experience,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(V2PUser__storage_, experience),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "fansCount",
        .dataTypeSpecific.className = NULL,
        .number = V2PUser_FieldNumber_FansCount,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(V2PUser__storage_, fansCount),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "followCount",
        .dataTypeSpecific.className = NULL,
        .number = V2PUser_FieldNumber_FollowCount,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(V2PUser__storage_, followCount),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "position",
        .dataTypeSpecific.className = GPBStringifySymbol(V2PPosition),
        .number = V2PUser_FieldNumber_Position,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(V2PUser__storage_, position),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "deviceId",
        .dataTypeSpecific.className = NULL,
        .number = V2PUser_FieldNumber_DeviceId,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(V2PUser__storage_, deviceId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "followType",
        .dataTypeSpecific.className = NULL,
        .number = V2PUser_FieldNumber_FollowType,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(V2PUser__storage_, followType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "descName",
        .dataTypeSpecific.className = NULL,
        .number = V2PUser_FieldNumber_DescName,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(V2PUser__storage_, descName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "v2Id",
        .dataTypeSpecific.className = NULL,
        .number = V2PUser_FieldNumber_V2Id,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(V2PUser__storage_, v2Id),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "v2UserName",
        .dataTypeSpecific.className = NULL,
        .number = V2PUser_FieldNumber_V2UserName,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(V2PUser__storage_, v2UserName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "v2Pwd",
        .dataTypeSpecific.className = NULL,
        .number = V2PUser_FieldNumber_V2Pwd,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(V2PUser__storage_, v2Pwd),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "videoCount",
        .dataTypeSpecific.className = NULL,
        .number = V2PUser_FieldNumber_VideoCount,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(V2PUser__storage_, videoCount),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "v2DeviceId1",
        .dataTypeSpecific.className = NULL,
        .number = V2PUser_FieldNumber_V2DeviceId1,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(V2PUser__storage_, v2DeviceId1),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "v2DeviceId2",
        .dataTypeSpecific.className = NULL,
        .number = V2PUser_FieldNumber_V2DeviceId2,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(V2PUser__storage_, v2DeviceId2),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[V2PUser class]
                                     rootClass:[V2PMessageRoot class]
                                          file:V2PMessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(V2PUser__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\016\005\004&\000\006\010\000\010\010\000\014\t\000\r\013\000\017\007A\000\020J\000\021\010\000\022\003A\000\023\n\000\024\005\000\025\n\000"
        "\026\tB\000\027\tB\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - V2PPosition

@implementation V2PPosition

@dynamic hasLongitude, longitude;
@dynamic hasLatitude, latitude;
@dynamic hasRadius, radius;

typedef struct V2PPosition__storage_ {
  uint32_t _has_storage_[1];
  int32_t radius;
  double longitude;
  double latitude;
} V2PPosition__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "longitude",
        .dataTypeSpecific.className = NULL,
        .number = V2PPosition_FieldNumber_Longitude,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(V2PPosition__storage_, longitude),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "latitude",
        .dataTypeSpecific.className = NULL,
        .number = V2PPosition_FieldNumber_Latitude,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(V2PPosition__storage_, latitude),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "radius",
        .dataTypeSpecific.className = NULL,
        .number = V2PPosition_FieldNumber_Radius,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(V2PPosition__storage_, radius),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[V2PPosition class]
                                     rootClass:[V2PMessageRoot class]
                                          file:V2PMessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(V2PPosition__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - V2PVideo

@implementation V2PVideo

@dynamic hasId_p, id_p;
@dynamic hasVideoNum, videoNum;
@dynamic hasUserId, userId;
@dynamic hasPosition, position;
@dynamic hasSum, sum;
@dynamic hasUserCount, userCount;
@dynamic hasLikeCount, likeCount;
@dynamic hasGratuityCount, gratuityCount;
@dynamic hasDegree, degree;
@dynamic hasResultType, resultType;
@dynamic hasHlsmode, hlsmode;
@dynamic hasVideoPwd, videoPwd;

typedef struct V2PVideo__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t userId;
  int32_t sum;
  int32_t userCount;
  int32_t likeCount;
  float gratuityCount;
  int32_t degree;
  int32_t resultType;
  NSString *videoNum;
  V2PPosition *position;
  NSString *videoPwd;
} V2PVideo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = V2PVideo_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(V2PVideo__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "videoNum",
        .dataTypeSpecific.className = NULL,
        .number = V2PVideo_FieldNumber_VideoNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(V2PVideo__storage_, videoNum),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = V2PVideo_FieldNumber_UserId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(V2PVideo__storage_, userId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "position",
        .dataTypeSpecific.className = GPBStringifySymbol(V2PPosition),
        .number = V2PVideo_FieldNumber_Position,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(V2PVideo__storage_, position),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sum",
        .dataTypeSpecific.className = NULL,
        .number = V2PVideo_FieldNumber_Sum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(V2PVideo__storage_, sum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "userCount",
        .dataTypeSpecific.className = NULL,
        .number = V2PVideo_FieldNumber_UserCount,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(V2PVideo__storage_, userCount),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "likeCount",
        .dataTypeSpecific.className = NULL,
        .number = V2PVideo_FieldNumber_LikeCount,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(V2PVideo__storage_, likeCount),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "gratuityCount",
        .dataTypeSpecific.className = NULL,
        .number = V2PVideo_FieldNumber_GratuityCount,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(V2PVideo__storage_, gratuityCount),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "degree",
        .dataTypeSpecific.className = NULL,
        .number = V2PVideo_FieldNumber_Degree,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(V2PVideo__storage_, degree),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "resultType",
        .dataTypeSpecific.className = NULL,
        .number = V2PVideo_FieldNumber_ResultType,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(V2PVideo__storage_, resultType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "hlsmode",
        .dataTypeSpecific.className = NULL,
        .number = V2PVideo_FieldNumber_Hlsmode,
        .hasIndex = 10,
        .offset = 11,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "videoPwd",
        .dataTypeSpecific.className = NULL,
        .number = V2PVideo_FieldNumber_VideoPwd,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(V2PVideo__storage_, videoPwd),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[V2PVideo class]
                                     rootClass:[V2PMessageRoot class]
                                          file:V2PMessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(V2PVideo__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\002\010\000\003\006\000\006\t\000\007\t\000\010\r\000\n\n\000\013d\003\000\014\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - V2PGratuity

@implementation V2PGratuity

@dynamic hasGiftType, giftType;
@dynamic hasToUserId, toUserId;
@dynamic hasFromUserId, fromUserId;
@dynamic hasAmount, amount;
@dynamic hasSumOrRemain, sumOrRemain;
@dynamic hasAnswer, answer;
@dynamic hasVideoId, videoId;

typedef struct V2PGratuity__storage_ {
  uint32_t _has_storage_[1];
  int32_t giftType;
  int32_t toUserId;
  int32_t fromUserId;
  float amount;
  float sumOrRemain;
  V2PGratuity_Answer answer;
  int32_t videoId;
} V2PGratuity__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftType",
        .dataTypeSpecific.className = NULL,
        .number = V2PGratuity_FieldNumber_GiftType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(V2PGratuity__storage_, giftType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "toUserId",
        .dataTypeSpecific.className = NULL,
        .number = V2PGratuity_FieldNumber_ToUserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(V2PGratuity__storage_, toUserId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "fromUserId",
        .dataTypeSpecific.className = NULL,
        .number = V2PGratuity_FieldNumber_FromUserId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(V2PGratuity__storage_, fromUserId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = V2PGratuity_FieldNumber_Amount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(V2PGratuity__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "sumOrRemain",
        .dataTypeSpecific.className = NULL,
        .number = V2PGratuity_FieldNumber_SumOrRemain,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(V2PGratuity__storage_, sumOrRemain),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "answer",
        .dataTypeSpecific.enumDescFunc = V2PGratuity_Answer_EnumDescriptor,
        .number = V2PGratuity_FieldNumber_Answer,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(V2PGratuity__storage_, answer),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "videoId",
        .dataTypeSpecific.className = NULL,
        .number = V2PGratuity_FieldNumber_VideoId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(V2PGratuity__storage_, videoId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[V2PGratuity class]
                                     rootClass:[V2PMessageRoot class]
                                          file:V2PMessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(V2PGratuity__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\010\000\002\007A\000\003\tA\000\005\013\000\007\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum V2PGratuity_Answer

GPBEnumDescriptor *V2PGratuity_Answer_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Receive\000Accept\000Refuse\000Cancel\000";
    static const int32_t values[] = {
        V2PGratuity_Answer_Receive,
        V2PGratuity_Answer_Accept,
        V2PGratuity_Answer_Refuse,
        V2PGratuity_Answer_Cancel,
    };
    static const char *extraTextFormatInfo = "\004\000\'\000\001&\000\002&\000\003&\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(V2PGratuity_Answer)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:V2PGratuity_Answer_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL V2PGratuity_Answer_IsValidValue(int32_t value__) {
  switch (value__) {
    case V2PGratuity_Answer_Receive:
    case V2PGratuity_Answer_Accept:
    case V2PGratuity_Answer_Refuse:
    case V2PGratuity_Answer_Cancel:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - V2PReward

@implementation V2PReward

@dynamic hasId_p, id_p;
@dynamic hasPowerTime, powerTime;
@dynamic hasReleaseTime, releaseTime;
@dynamic giftArray, giftArray_Count;
@dynamic hasFromUserId, fromUserId;
@dynamic hasAnswerUserId, answerUserId;
@dynamic hasOperate, operate;
@dynamic hasDesc, desc;
@dynamic hasPosition, position;
@dynamic hasPushSum, pushSum;
@dynamic hasAppealDesc, appealDesc;
@dynamic hasAppealTime, appealTime;

typedef struct V2PReward__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t powerTime;
  int32_t fromUserId;
  int32_t answerUserId;
  V2PReward_Operate operate;
  int32_t pushSum;
  NSMutableArray *giftArray;
  NSString *desc;
  V2PPosition *position;
  NSString *appealDesc;
  int64_t releaseTime;
  int64_t appealTime;
} V2PReward__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = V2PReward_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(V2PReward__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "powerTime",
        .dataTypeSpecific.className = NULL,
        .number = V2PReward_FieldNumber_PowerTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(V2PReward__storage_, powerTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "releaseTime",
        .dataTypeSpecific.className = NULL,
        .number = V2PReward_FieldNumber_ReleaseTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(V2PReward__storage_, releaseTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "giftArray",
        .dataTypeSpecific.className = GPBStringifySymbol(V2PGift),
        .number = V2PReward_FieldNumber_GiftArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(V2PReward__storage_, giftArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fromUserId",
        .dataTypeSpecific.className = NULL,
        .number = V2PReward_FieldNumber_FromUserId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(V2PReward__storage_, fromUserId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "answerUserId",
        .dataTypeSpecific.className = NULL,
        .number = V2PReward_FieldNumber_AnswerUserId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(V2PReward__storage_, answerUserId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "operate",
        .dataTypeSpecific.enumDescFunc = V2PReward_Operate_EnumDescriptor,
        .number = V2PReward_FieldNumber_Operate,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(V2PReward__storage_, operate),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "desc",
        .dataTypeSpecific.className = NULL,
        .number = V2PReward_FieldNumber_Desc,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(V2PReward__storage_, desc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "position",
        .dataTypeSpecific.className = GPBStringifySymbol(V2PPosition),
        .number = V2PReward_FieldNumber_Position,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(V2PReward__storage_, position),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pushSum",
        .dataTypeSpecific.className = NULL,
        .number = V2PReward_FieldNumber_PushSum,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(V2PReward__storage_, pushSum),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "appealDesc",
        .dataTypeSpecific.className = NULL,
        .number = V2PReward_FieldNumber_AppealDesc,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(V2PReward__storage_, appealDesc),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appealTime",
        .dataTypeSpecific.className = NULL,
        .number = V2PReward_FieldNumber_AppealTime,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(V2PReward__storage_, appealTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[V2PReward class]
                                     rootClass:[V2PMessageRoot class]
                                          file:V2PMessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(V2PReward__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\002\t\000\003\013\000\005\tA\000\006\013A\000\n\007\000\013\n\000\014\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum V2PReward_Operate

GPBEnumDescriptor *V2PReward_Operate_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Release\000Cancle\000Pay\000Answer\000Appeal\000";
    static const int32_t values[] = {
        V2PReward_Operate_Release,
        V2PReward_Operate_Cancle,
        V2PReward_Operate_Pay,
        V2PReward_Operate_Answer,
        V2PReward_Operate_Appeal,
    };
    static const char *extraTextFormatInfo = "\005\000\'\000\001&\000\002#\000\003&\000\004&\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(V2PReward_Operate)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:V2PReward_Operate_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL V2PReward_Operate_IsValidValue(int32_t value__) {
  switch (value__) {
    case V2PReward_Operate_Release:
    case V2PReward_Operate_Cancle:
    case V2PReward_Operate_Pay:
    case V2PReward_Operate_Answer:
    case V2PReward_Operate_Appeal:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - V2PGift

@implementation V2PGift

@dynamic hasGiftType, giftType;
@dynamic hasAmount, amount;
@dynamic hasSumOrRemain, sumOrRemain;

typedef struct V2PGift__storage_ {
  uint32_t _has_storage_[1];
  int32_t giftType;
  float amount;
  float sumOrRemain;
} V2PGift__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftType",
        .dataTypeSpecific.className = NULL,
        .number = V2PGift_FieldNumber_GiftType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(V2PGift__storage_, giftType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = V2PGift_FieldNumber_Amount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(V2PGift__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "sumOrRemain",
        .dataTypeSpecific.className = NULL,
        .number = V2PGift_FieldNumber_SumOrRemain,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(V2PGift__storage_, sumOrRemain),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[V2PGift class]
                                     rootClass:[V2PMessageRoot class]
                                          file:V2PMessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(V2PGift__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\010\000\003\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - V2PUserState

@implementation V2PUserState

@dynamic hasUserId, userId;
@dynamic hasOperateId, operateId;
@dynamic hasState, state;
@dynamic hasDesc, desc;

typedef struct V2PUserState__storage_ {
  uint32_t _has_storage_[1];
  int32_t userId;
  int32_t operateId;
  V2PUserState_State state;
  NSString *desc;
} V2PUserState__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = V2PUserState_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(V2PUserState__storage_, userId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "operateId",
        .dataTypeSpecific.className = NULL,
        .number = V2PUserState_FieldNumber_OperateId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(V2PUserState__storage_, operateId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "state",
        .dataTypeSpecific.enumDescFunc = V2PUserState_State_EnumDescriptor,
        .number = V2PUserState_FieldNumber_State,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(V2PUserState__storage_, state),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "desc",
        .dataTypeSpecific.className = NULL,
        .number = V2PUserState_FieldNumber_Desc,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(V2PUserState__storage_, desc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[V2PUserState class]
                                     rootClass:[V2PMessageRoot class]
                                          file:V2PMessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(V2PUserState__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\006\000\002\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum V2PUserState_State

GPBEnumDescriptor *V2PUserState_State_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Online\000Offline\000P2PVideo\000MultiVideo\000Other"
        "\000";
    static const int32_t values[] = {
        V2PUserState_State_Online,
        V2PUserState_State_Offline,
        V2PUserState_State_P2PVideo,
        V2PUserState_State_MultiVideo,
        V2PUserState_State_Other,
    };
    static const char *extraTextFormatInfo = "\005\000&\000\001\'\000\002\"&\000\003\n\000\004%\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(V2PUserState_State)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:V2PUserState_State_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL V2PUserState_State_IsValidValue(int32_t value__) {
  switch (value__) {
    case V2PUserState_State_Online:
    case V2PUserState_State_Offline:
    case V2PUserState_State_P2PVideo:
    case V2PUserState_State_MultiVideo:
    case V2PUserState_State_Other:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - V2PAssetLog

@implementation V2PAssetLog

@dynamic hasFromUserId, fromUserId;
@dynamic hasToUserId, toUserId;
@dynamic giftArray, giftArray_Count;
@dynamic hasDesc, desc;
@dynamic hasOperateType, operateType;
@dynamic hasOperateTime, operateTime;
@dynamic hasSoType, soType;
@dynamic hasPayType, payType;
@dynamic hasPayTime, payTime;
@dynamic hasVideoId, videoId;
@dynamic hasRewardId, rewardId;
@dynamic hasAppealDesc, appealDesc;
@dynamic hasAppealTime, appealTime;

typedef struct V2PAssetLog__storage_ {
  uint32_t _has_storage_[1];
  int32_t fromUserId;
  int32_t toUserId;
  V2PAssetLog_OperateType operateType;
  int32_t soType;
  int32_t payType;
  int32_t videoId;
  int32_t rewardId;
  NSMutableArray *giftArray;
  NSString *desc;
  NSString *appealDesc;
  int64_t operateTime;
  int64_t payTime;
  int64_t appealTime;
} V2PAssetLog__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fromUserId",
        .dataTypeSpecific.className = NULL,
        .number = V2PAssetLog_FieldNumber_FromUserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(V2PAssetLog__storage_, fromUserId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "toUserId",
        .dataTypeSpecific.className = NULL,
        .number = V2PAssetLog_FieldNumber_ToUserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(V2PAssetLog__storage_, toUserId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "giftArray",
        .dataTypeSpecific.className = GPBStringifySymbol(V2PGift),
        .number = V2PAssetLog_FieldNumber_GiftArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(V2PAssetLog__storage_, giftArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "desc",
        .dataTypeSpecific.className = NULL,
        .number = V2PAssetLog_FieldNumber_Desc,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(V2PAssetLog__storage_, desc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "operateType",
        .dataTypeSpecific.enumDescFunc = V2PAssetLog_OperateType_EnumDescriptor,
        .number = V2PAssetLog_FieldNumber_OperateType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(V2PAssetLog__storage_, operateType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "operateTime",
        .dataTypeSpecific.className = NULL,
        .number = V2PAssetLog_FieldNumber_OperateTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(V2PAssetLog__storage_, operateTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "soType",
        .dataTypeSpecific.className = NULL,
        .number = V2PAssetLog_FieldNumber_SoType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(V2PAssetLog__storage_, soType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "payType",
        .dataTypeSpecific.className = NULL,
        .number = V2PAssetLog_FieldNumber_PayType,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(V2PAssetLog__storage_, payType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "payTime",
        .dataTypeSpecific.className = NULL,
        .number = V2PAssetLog_FieldNumber_PayTime,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(V2PAssetLog__storage_, payTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "videoId",
        .dataTypeSpecific.className = NULL,
        .number = V2PAssetLog_FieldNumber_VideoId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(V2PAssetLog__storage_, videoId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "rewardId",
        .dataTypeSpecific.className = NULL,
        .number = V2PAssetLog_FieldNumber_RewardId,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(V2PAssetLog__storage_, rewardId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "appealDesc",
        .dataTypeSpecific.className = NULL,
        .number = V2PAssetLog_FieldNumber_AppealDesc,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(V2PAssetLog__storage_, appealDesc),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appealTime",
        .dataTypeSpecific.className = NULL,
        .number = V2PAssetLog_FieldNumber_AppealTime,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(V2PAssetLog__storage_, appealTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[V2PAssetLog class]
                                     rootClass:[V2PMessageRoot class]
                                          file:V2PMessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(V2PAssetLog__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\013\001\tA\000\002\007A\000\005\013\000\006\013\000\007\006\000\010\007\000\t\007\000\n\007\000\013\010\000\014\n\000\r\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum V2PAssetLog_OperateType

GPBEnumDescriptor *V2PAssetLog_OperateType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Recharge\000Cash\000Gratuity\000Reward\000All\000Income"
        "\000Payout\000";
    static const int32_t values[] = {
        V2PAssetLog_OperateType_Recharge,
        V2PAssetLog_OperateType_Cash,
        V2PAssetLog_OperateType_Gratuity,
        V2PAssetLog_OperateType_Reward,
        V2PAssetLog_OperateType_All,
        V2PAssetLog_OperateType_Income,
        V2PAssetLog_OperateType_Payout,
    };
    static const char *extraTextFormatInfo = "\007\000(\000\001$\000\002(\000\003&\000\004#\000\005&\000\006&\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(V2PAssetLog_OperateType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:V2PAssetLog_OperateType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL V2PAssetLog_OperateType_IsValidValue(int32_t value__) {
  switch (value__) {
    case V2PAssetLog_OperateType_Recharge:
    case V2PAssetLog_OperateType_Cash:
    case V2PAssetLog_OperateType_Gratuity:
    case V2PAssetLog_OperateType_Reward:
    case V2PAssetLog_OperateType_All:
    case V2PAssetLog_OperateType_Income:
    case V2PAssetLog_OperateType_Payout:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
